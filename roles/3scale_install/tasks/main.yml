---

- name: "Check if Noobaa is installed and ready"
  shell: "{{ openshift_cli }} get noobaa -o jsonpath='{{ jsonpath_template }}' -n {{ namespace_noobaa_operator }}"
  vars:
    jsonpath_template: '{range .items[*]}{.status.phase}{"\n"}{end}'
  register: noobaa_status
  ignore_errors: true

- name: "debug noobaa_install variable, use noobaa s3 if noobaa_install == true" 
  debug:
    var: noobaa_install

- name: "debug noobaa_status variable, noobaa is installed and in ready state if noobaa_status == Ready" 
  debug:
    var: noobaa_install    

- shell: |
    {{ openshift_cli }} get deployment 3scale-operator -o template --template={{ replica_status }} -n {{ namespace_threescale_operator }}
  register: resource_status
  ignore_errors: true

- block:
  - name: "copy {{ resources_base_dir }}/3scale-install/operator-group.yml"
    template:
      src: "{{ resources_base_dir }}/3scale-install/operator-group.yml"
      dest: "{{ work_dir }}/operator-group.yml"
  - name: "Create 3scale operator group"
    shell: "{{ openshift_cli }} create -f {{ work_dir }}/operator-group.yml -n {{ namespace_threescale_operator }}"

  - name: "copy {{ resources_base_dir }}/3scale-install/subscription.yml"
    template:
      src: "{{ resources_base_dir }}/3scale-install/subscription.yml"
      dest: "{{ work_dir }}/3scale-subscription.yml"
  - name: "Create 3scale subscription"
    shell: "{{ openshift_cli }} create -f {{ work_dir }}/3scale-subscription.yml -n {{ namespace_threescale_operator }}"

  - name: "Wait until 3scale operator is active"
    shell: "{{ openshift_cli }} get csv {{ threescale_operator_name }}.{{ threescale_operator_version_label }} -o template --template={{ json_template }} -n {{ namespace_threescale_operator }}"
    vars:
      json_template: '\{\{.status.phase\}\}'
    register: result
    until: result.stdout == "Succeeded"
    retries: 30
    delay: 15
    changed_when: false

  - name: "3scale AWS S3 Secret"
    block:
      - name: "Create 3scale AWS S3 Secret"
        template:
          src: "{{ resources_base_dir }}/3scale-install/secrets/aws-auth.yml"
          dest: "{{ work_dir }}/aws-auth.yml"
      - shell: "{{ openshift_cli }} create -f {{ work_dir }}/aws-auth.yml -n {{ namespace_threescale_operator }}"
    when: noobaa_install|bool != true  

  - name: "3scale Noobaa S3 Secret"
    block:
      - name: "Create 3scale Noobaa S3 Secret"
        template:
          src: "{{ resources_base_dir }}/3scale-install/secrets/aws-auth-noobaa.yml"
          dest: "{{ work_dir }}/aws-auth.yml"
      - shell: "{{ openshift_cli }} create -f {{ work_dir }}/aws-auth.yml -n {{ namespace_threescale_operator }}"
    when: noobaa_install|bool == true        

  - name: "Define 3scale system-smtp Secret"
    template:
      src: "{{ resources_base_dir }}/3scale-install/secrets/system-smtp.yml"
      dest: "{{ work_dir }}/system-smtp.yml"
  - shell: "{{ openshift_cli }} create -f {{ work_dir }}/system-smtp.yml -n {{ namespace_threescale_operator }}"

  - name: "Create 3scale Pull Secret"
    shell: "{{ openshift_cli }} get secret pull-secret -n openshift-config -o yaml | sed 's/namespace: openshift-config/namespace: {{ namespace_threescale_operator }}/' | sed 's/pull-secret/threescale-registry-auth/' | oc create -n {{ namespace_threescale_operator }} -f -"

  - name: "Create 3scale system-seed secret"
    template:
      src: "{{ resources_base_dir }}/3scale-install/secrets/system-seed.yml"
      dest: "{{ work_dir }}/system-seed.yml"
  - shell: "{{ openshift_cli }} create -f {{ work_dir }}/system-seed.yml -n {{ namespace_threescale_operator }}"
  
  - name: "Create 3scale API Manager"
    template:
      src: "{{ resources_base_dir }}/3scale-install/custom-resources/api-manager.yml"
      dest: "{{ work_dir }}/api-manager.yml"
  - shell: "{{ openshift_cli }} create -f {{ work_dir }}/api-manager.yml -n {{ namespace_threescale_operator }}"
  
  - name: "Wait until 3scale API Manager is active"
    shell: "{{ openshift_cli }} get dc system-app -o template --template={{ json_template }} -n {{ namespace_threescale_operator }}"
    vars:
      json_template: '\{\{.status.availableReplicas\}\}'
    register: result
    until: result.stdout == "1"
    retries: 30
    delay: 20
    changed_when: false

  when: >
    resource_status.stdout is not defined or
    resource_status.stdout is none or
    resource_status.stdout != "1"
