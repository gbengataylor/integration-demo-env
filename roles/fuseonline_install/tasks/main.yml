---

- shell: |
    {{ openshift_cli }} get deployment syndesis-operator -o template --template={{ replica_status }} -n {{ namespace_fuseonline_operator }}
  register: resource_status
  ignore_errors: true

- block:
  - name: "copy {{ resources_base_dir }}/fuseonline-install/operator-group-fuseonline.yml"
    template:
      src: "{{ resources_base_dir }}/fuseonline-install/operator-group-fuseonline.yml"
      dest: "{{ work_dir }}/operator-group-fuseonline.yml"
  - name: "Create Fuse Online operator group"
    shell: "{{ openshift_cli }} create -f {{ work_dir }}/operator-group-fuseonline.yml -n {{ namespace_fuseonline_operator }}"

  - name: "copy {{ resources_base_dir }}/fuseonline-install/subscription-camelk.yml"
    template:
      src: "{{ resources_base_dir }}/fuseonline-install/subscription-camelk.yml"
      dest: "{{ work_dir }}/subscription-camelk.yml"
  - name: "Create Camel-K operator subscription"
    shell: "{{ openshift_cli }} create -f {{ work_dir }}/subscription-camelk.yml -n {{ namespace_fuseonline_operator }}"

  - name: "Wait until Camel-K operator is installed"
    shell: "{{ openshift_cli }} get csv {{ camelk_operator_name }}.{{ camelk_operator_version_label }} -o template --template={{ json_template }} -n {{ namespace_fuseonline_operator }}"
    vars:
      json_template: '\{\{.status.phase\}\}'
    register: result
    until: result.stdout == "Succeeded"
    retries: 30
    delay: 20
    changed_when: false
  
  - name: "Create Integration Platform custom resource"
    template:
      src: "{{ resources_base_dir }}/fuseonline-install/custom-resources/integration-platform.yml"
      dest: "{{ work_dir }}/integration-platform.yml"
  - shell: "{{ openshift_cli }} create -f {{ work_dir }}/integration-platform.yml -n {{ namespace_fuseonline_operator }}"
  
  - name: "Wait until Integration Platform is active"
    shell: "{{ openshift_cli }} get integrationplatform camel-k -o template --template={{ json_template }} -n {{ namespace_fuseonline_operator }}"
    vars:
      json_template: '\{\{.status.phase\}\}'
    register: result
    until: result.stdout == "Ready"
    retries: 30
    delay: 20
    changed_when: false

  - name: "copy {{ resources_base_dir }}/fuseonline-install/subscription-fuseonline.yml"
    template:
      src: "{{ resources_base_dir }}/fuseonline-install/subscription-fuseonline.yml"
      dest: "{{ work_dir }}/subscription-fuseonline.yml"
  - name: "Create Fuse Online operator subscription"
    shell: "{{ openshift_cli }} create -f {{ work_dir }}/subscription-fuseonline.yml -n {{ namespace_fuseonline_operator }}"

  - name: "Create Syndesis pull secret"
    # shell: "{{ openshift_cli }} get secret pull-secret -n openshift-config --export -o yaml | sed 's/pull-secret/syndesis-pull-secret/' | sed '/selfLink/d' | {{ openshift_cli }} apply -n {{ namespace_fuseonline_operator }} -f -"
    shell: "{{ openshift_cli }} get secret pull-secret -n openshift-config -o yaml | sed 's/namespace: openshift-config/namespace: {{ namespace_fuseonline_operator }}/' | sed 's/pull-secret/syndesis-pull-secret/' | oc create -n {{ namespace_fuseonline_operator }} -f -"
  
  - name: "Wait until Fuse Online operator is installed"
    shell: "{{ openshift_cli }} get csv {{ fuseonline_operator_name }}.{{ fuseonline_operator_version_label }} -o template --template={{ json_template }} -n {{ namespace_fuseonline_operator }}"
    vars:
      json_template: '\{\{.status.phase\}\}'
    register: result
    until: result.stdout == "Succeeded"
    retries: 30
    delay: 20
    changed_when: false

  - name: "Link Syndesis pull secret to the Syndesis operator service account."
    shell: "{{ openshift_cli }} secrets link syndesis-operator syndesis-pull-secret --for=pull -n {{ namespace_fuseonline_operator }}"

  - name: "Create Syndesis service"
    template:
      src: "{{ resources_base_dir }}/fuseonline-install/custom-resources/syndesis.yml"
      dest: "{{ work_dir }}/syndesis.yml"
  - shell: "{{ openshift_cli }} create -f {{ work_dir }}/syndesis.yml -n {{ namespace_fuseonline_operator }}"

  - name: "Wait until Syndesis is active"
    shell: "oc get syndesis syndesis-service -o template --template={{ json_template }} -n {{ namespace_fuseonline_operator }}"
    vars:
      json_template: '\{\{.status.phase\}\}'
    register: result
    until: result.stdout == "Installed"
    retries: 30
    delay: 20
    changed_when: false

  when: >
    resource_status.stdout is not defined or
    resource_status.stdout is none or
    resource_status.stdout != "1"
